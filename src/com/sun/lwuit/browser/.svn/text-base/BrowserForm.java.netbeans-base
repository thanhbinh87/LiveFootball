/*
 * Copyright 2008 Sun Microsystems, Inc.  All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
 */
package com.sun.lwuit.browser;

import com.sun.lwuit.Command;
import com.sun.lwuit.Dialog;
import com.sun.lwuit.Font;
import com.sun.lwuit.Form;
import com.sun.lwuit.Label;
import com.sun.lwuit.TextField;
import com.sun.lwuit.events.ActionEvent;
import com.sun.lwuit.html.DocumentRequestHandler;
import com.sun.lwuit.html.HTMLCallback;
import com.sun.lwuit.html.HTMLComponent;
import com.sun.lwuit.layouts.BorderLayout;
import java.util.Hashtable;
import com.sun.lwuit.Display;
import com.sun.lwuit.TextArea;
import com.sun.lwuit.events.ActionListener;
import com.sun.lwuit.plaf.Border;
import com.sun.lwuit.plaf.UIManager;
import java.util.Vector;
import javax.microedition.lcdui.Canvas;

/**
 * Uses an HTMLComponent to create an XHTML-MP 1.0 browser. The BrowserForm i scomposed mainly of a toolbar (BrowserToolbar) and an HTMLComponent.
 * It also implements the HTMLCallback interface to receive events from the HTMLComponent and change the UI acordingly.
 *
 * @author Ofir Leitner
 */
public class BrowserForm extends Form implements HTMLCallback,ActionListener {

    /**
     * Set to 'true' to use bitmap fonts
     * This can be modified using the JAD property use_bitmap_fonts
     */
    static boolean useBitmapFonts=false;

    /**
     * If useBitmapFonts is set to true, the following list of fonts will be loaded
     * Note that too many fonts can cause memory problems
     */
    static String fonts[] = {"arial.12","arial.12.bold","arial.12.bold.italic","arial.12.italic","arial.14","courier.10",
                             "arial.20","arial.bold.10","arial.8","h1.arial.20.bold","small-caps.12","small-caps.12.bold"};

    /**
     * Set to 'true' to turn on toolbar sliding animation (Doesn't work too good on some devices)
     */
    static boolean animateToolbar=true;

    Label titleLabel;
    Label dummyLabel = new Label();
    HTMLComponent htmlC;
    static Hashtable autoCompleteCache = Storage.getFormData();
    
    /**
     * This address will be used as the homepage and as the first page accessed
     * This can be modified using the JAD property homepage
     */
    static String PAGE_HOME = "file:///index.html";

    /**
     * The address of the help file
     */
    static final String PAGE_HELP = "file:///help.html";

    BrowserToolbar toolBar;

    Command exitCmd=new Command("Exit");
    Command helpCmd=new Command("Help");
    Command clearCmd=new Command("Clear Data");
    Command toolbarCmd=new Command("Toolbar");
    Command backCmd=new Command("Back");
    Command forwardCmd=new Command("Forward");
    Command stopCmd=new Command("Stop");
    Command homeCmd=new Command("Home");
    Command refreshCmd=new Command("Refresh");
    Command imagesCmd=new Command("Images");
    Command toggleCSSCmd=new Command("CSS");

    /**
     * If true the navigation bar will be shown on application start.
     * This can be modified using the JAD property navbar_display
     */
    static boolean displayNavBarOnInit = true;

    /**
     * If true the navigation bar will be either shown or not shown (according to displayNavBarOnInit) without the option to toggle it.
     * This can be modified using the JAD property navbar_lock
     */
    static boolean lockNavBar = false;

    /**
     * The menu font name, if null then a proportional,plain,medium system font will be used.
     * This can be modified using the JAD property menu_font
     */
    static String menuFontName;


    boolean showImages=true;
    boolean loadCSS=true;
    BrowserMIDlet midlet;
    DocumentRequestHandler handler;

    public BrowserForm(BrowserMIDlet midlet) {
        this.midlet=midlet;
        setMenuFont();
        HTMLComponent.addSpecialKey("send", 'z');

        setLayout(new BorderLayout());
        setScrollable(false); // The HTMLComponent itself will be scrollable, not the form
        setScrollableX(false); // The HTMLComponent itself will be scrollable, not the form

        // Creating the HTMLComponent and its handler
        handler=new HttpRequestHandler();
        htmlC = new HTMLComponent(handler);
        htmlC.getStyle().setPadding(0, 0, 3, 3);
        htmlC.setHTMLCallback(this);

        // If using bitmap fonts, load the fonts and make the first the default
        if (useBitmapFonts) {
            for(int i=0;i<fonts.length;i++) {
                System.out.println("Loading font "+fonts[i]);
                HTMLComponent.addFont(fonts[i], Font.getBitmapFont(fonts[i]));
            }
            htmlC.setDefaultFont(fonts[0], Font.getBitmapFont(fonts[0]));
        }


        // Creating the toolbar and editing it to the upper segment of the form
        toolBar=new BrowserToolbar(htmlC);
        toolBar.setHomePage(PAGE_HOME);
        if (displayNavBarOnInit) {
            addComponent(BorderLayout.NORTH, toolBar);
        }
        addComponent(BorderLayout.CENTER,htmlC);

        // Creation and setup of the title
        titleLabel = new Label("Loading...");
        titleLabel.setStyle(getTitleStyle());
        titleLabel.setText(htmlC.getTitle());
        titleLabel.setTickerEnabled(false);
        setTitleComponent(titleLabel);

        // Adds the command to the form
        addCommand(backCmd);
        addCommand(exitCmd);
        addCommand(clearCmd);
        addCommand(helpCmd);
        addCommand(toolbarCmd);
        addCommand(stopCmd);
        addCommand(forwardCmd);
        addCommand(refreshCmd);
        addCommand(homeCmd);
        addCommand(imagesCmd);
        addCommand(toggleCSSCmd);


        // Sets the form as the command listener
        addCommandListener(this);

        // Loads the page
        htmlC.setPage(PAGE_HOME);
        
        // See below commented code for examples of setBodyText and setHTML:
        
        // Example #1: Set Body without title
        //htmlC.setBodyText("Testing HTML 123 <a href=\"test\">Test link</a><hr>");

        // Example #2: Set Body with title and an active
        //htmlC.setHTML("Testing HTML 123<br><a href=\"http://m.google.com\">Absolute link - Active</a><br><br><a href=\"test\">Relative link - Inactive</a><hr>",null,"Titletest",false); // Set body with title

        // Example #3: Set full HTML - relative links will not be active, only absolute ones
        /*InputStream is=getClass().getResourceAsStream("/index.html");
        try {
            byte[] buf = HttpRequestHandler.getBuffer(is);
            String body=new String(buf);
            System.out.println("body="+body);
            htmlC.setHTML(body,null,null,true);
        } catch (IOException ex) {
            ex.printStackTrace();
        }*/

    }

    private void setMenuFont() {
        if (menuFontName!=null) {
            Font menuFont=null;
            menuFontName=menuFontName.toLowerCase();

            if (menuFontName.startsWith("system")) {
                int size=Font.SIZE_MEDIUM;
                int style=Font.STYLE_PLAIN;
                int face=Font.FACE_PROPORTIONAL;
                menuFontName=menuFontName.substring(6);
                if (menuFontName.indexOf("small")!=-1) {
                    size=Font.SIZE_SMALL;
                } else if (menuFontName.indexOf("large")!=-1) {
                    size=Font.SIZE_LARGE;
                }

                if (menuFontName.indexOf("bold")!=-1) {
                    style=Font.STYLE_BOLD;
                } else if (menuFontName.indexOf("italic")!=-1) {
                    style=Font.STYLE_ITALIC;
                }

                if (menuFontName.indexOf("system")!=-1) {
                    face=Font.FACE_SYSTEM;
                } else if (menuFontName.indexOf("mono")!=-1) {
                    face=Font.FACE_MONOSPACE;
                }
                menuFont=Font.createSystemFont(face, style, size);
            } else {
                menuFont=Font.getBitmapFont(menuFontName);
            }

            if (menuFont!=null) {
                getSoftButtonStyle().setFont(menuFont);
                setSoftButtonStyle(getSoftButtonStyle());
                getTitleStyle().setFont(menuFont);
            }

        }

    }

    /**
     * Overriden to catch the POUND, STAR and 0 keys that are used as shortcuts
     * @param keyCode
     */
    public void keyReleased(int keyCode) {
        super.keyReleased(keyCode);
        if (!(getFocused() instanceof TextField)) {
            switch(keyCode) {
                case Display.KEY_POUND:
                    toolBar.home();
                    break;
                case Canvas.KEY_STAR:
                    if (!lockNavBar) {
                        toggleToolbar();
                    }
                    break;
                case Canvas.KEY_NUM0:
                    toolBar.stop();
                    break;
                case Canvas.KEY_NUM2: // Focus on addressbar
                    setFocused(toolBar.address);
                    break;
                case Canvas.KEY_NUM9: //Page Down
                    htmlC.scrollPages(1, true);
                    break;
                case Canvas.KEY_NUM3 : //Page Up
                    htmlC.scrollPages(-1, true);
                    break;
                case Canvas.KEY_NUM1 : //Home
                    htmlC.scrollPages(-1000, true);
                    break;
                case Canvas.KEY_NUM7 : //End
                    htmlC.scrollPages(1000, true);
                    break;
                case Canvas.KEY_NUM4 : //Back
                    toolBar.back();
                    break;
                case Canvas.KEY_NUM5 : //Refresh
                    toolBar.refresh();
                    break;
                case Canvas.KEY_NUM6 : //Foward
                    toolBar.forward();
                    break;

            }
        }
    }


    // HTMLCallback implementation:

    /**
     * {@inheritDoc}
     */
    public void titleUpdated(HTMLComponent htmlC, String title) {
        if ((title==null) || (title.equals(""))) {
            title="Untitled";
        }
        titleLabel.setText(title);
    }

    /**
     * {@inheritDoc}
     */
    public boolean parsingError(int errorId, String tag, String attribute, String value, String description) {
        System.out.println(description);
        return true;
    }

    /**
     * {@inheritDoc}
     */
    public void pageStatusChanged(HTMLComponent htmlC, int phase, String url) {
        if (phase==HTMLCallback.STATUS_REQUESTED) {
            titleLabel.setText("Loading...");
            toolBar.notifyLoading();
        } else if ((phase==HTMLCallback.STATUS_DISPLAYED) || //(phase==HTMLCallback.STATUS_COMPLETED) || 
                   (phase==HTMLCallback.STATUS_ERROR) || (phase==HTMLCallback.STATUS_CANCELLED)) {
            toolBar.notifyLoadCompleted(url);
        }
    }

    /**
     * {@inheritDoc}
     */
    public String fieldSubmitted(HTMLComponent htmlC, TextArea ta, String actionURL, String id, String value, int type,String errorMsg) {
        if (errorMsg!=null) {
            System.out.println("Malformed text");
            Dialog.show(UIManager.getInstance().localize("html.format.errortitle", "Format error"), errorMsg, UIManager.getInstance().localize("ok", "OK"), null);

            htmlC.getComponentForm().scrollComponentToVisible(ta);
            ta.getUnselectedStyle().setBorder(Border.createLineBorder(2, 0xff0000));
            ta.getSelectedStyle().setBorder(Border.createLineBorder(2, 0xff0000));
            setFocused(ta);
            ta.repaint();
            return null;
        } else { // Restore original look&feel in case there was an error before
            if (ta instanceof TextArea) {
                ta.setUIID("TextArea");
            } else {
                ta.setUIID("TextField");
            }
        }

        Hashtable urlCache = (Hashtable)autoCompleteCache.get(actionURL);
        if (urlCache==null) {
            urlCache=new Hashtable();
            autoCompleteCache.put(actionURL,urlCache);
        }
        urlCache.put(id,value);
        Storage.addFormData(actionURL, id, value);

        return value;
    }

    /**
     * {@inheritDoc}
     */
    public String getAutoComplete(HTMLComponent htmlC, String actionURL, String id) {
        if (actionURL==null) {
            return null;
        }
        Hashtable urlCache = (Hashtable)autoCompleteCache.get(actionURL);
        String auto=null;
        if (urlCache!=null) {
            auto=(String)urlCache.get(id);
        }
        return auto;
        //return (String)autoCompleteCache.get(id);
    }

    /**
     * {@inheritDoc}
     */
    public int getLinkProperties(HTMLComponent htmlC, String url) {
        if (url==null) {
            System.out.println("NULL URL!!!!");
        }

        String domain=HttpRequestHandler.getDomainForLinks(url);

        if (domain==null) {
            return LINK_FORBIDDEN; //unknown protocol
        }
        Vector visited=(Vector)HttpRequestHandler.visitedLinks.get(domain);
        if (visited!=null) {
            if (visited.contains(url)) {
                return HTMLCallback.LINK_VISTED;
            }
        }
        return HTMLCallback.LINK_REGULAR;
    }

    public void actionPerformed(ActionEvent evt) {
        Command cmd=evt.getCommand();
        if (cmd==imagesCmd) {
                showImages=!showImages;
                htmlC.setShowImages(showImages);
                String status=showImages?"on":"off";
                Dialog.show("Images "+status,"Images have been turned "+status,null,Dialog.TYPE_INFO,null,2000);
        } else if (cmd==toggleCSSCmd) {
                loadCSS=!loadCSS;
                htmlC.setIgnoreCSS(!loadCSS);
                String status=loadCSS?"on":"off";
                Dialog.show("CSS "+status,"CSS has been turned "+status,null,Dialog.TYPE_INFO,null,2000);
        } else if (cmd==exitCmd) {
            midlet.saveToRMS();
            midlet.notifyDestroyed();
        } else if (cmd==helpCmd) {
            htmlC.setPage(PAGE_HELP);
        } else if (cmd==backCmd) {
            toolBar.back();
        } else if (cmd==forwardCmd) {
            toolBar.forward();
        } else if (cmd==refreshCmd) {
            toolBar.refresh();
        } else if (cmd==stopCmd) {
            toolBar.stop();
        } else if (cmd==homeCmd) {
            toolBar.home();
        } else if (cmd==toolbarCmd) {
            toggleToolbar();
        } else if (cmd==clearCmd) {
            HttpRequestHandler.cookies=new Hashtable();
            Storage.clearCookies();
            Storage.clearFormData();
            HttpRequestHandler.visitedLinks=Storage.clearHistory();

        }
    }

    private void toggleToolbar() {
            if (toolBar.getParent()==null) {

                if (animateToolbar) {
                    toolBar.setPreferredH(0);
                    addComponent(BorderLayout.NORTH, toolBar);
                    toolBar.slideIn();
                } else {
                    addComponent(BorderLayout.NORTH, toolBar);
                    setFocused(toolBar);
                }

            } else {
                if (animateToolbar) {
                    toolBar.slideOut();
                } else {
                    removeComponent(toolBar);
                }
            }
            revalidate();

    }

    public boolean linkClicked(HTMLComponent htmlC, String url) {
        System.out.println("Link clicked: "+url);
        return true;
    }

 }